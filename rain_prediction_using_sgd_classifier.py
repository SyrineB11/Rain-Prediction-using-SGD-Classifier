# -*- coding: utf-8 -*-
"""Rain Prediction using SGD Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wbMuk_3Xn9b_zWzZ4gblss8oWcViaDPr
"""

import numpy as np
import pandas as pd

train=pd.read_csv('weatherAUS.csv')

X=train.drop(columns='Location')
X=X.drop(columns='Evaporation')
X=X.drop(columns='Sunshine')
X=X.drop(columns='RainTomorrow')
X=X.drop(columns='Date')
Y=train['RainTomorrow']

X.head(2)

from sklearn import preprocessing
le= preprocessing.LabelEncoder()
cols=["WindDir9am","WindDir3pm",'WindGustDir','Cloud9am','Cloud3pm','RainToday']
for i in cols :
    X[i]= le.fit_transform(X[i]) # fit label encoder and return encoder labels
     #transform label to normalized encoding
    
    print(le.classes_) #preprocessing the features without char

train['RainTomorrow']=le.fit_transform(train['RainTomorrow'])
print(Y.head(2))

from sklearn.model_selection import train_test_split #split our data

from sklearn.linear_model import  SGDClassifier

model = SGDClassifier()

X=X.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)
Y=Y.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)

X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,stratify=Y ,random_state=1)

"""I used Stochastic Gradient Descent cz for BIG DATA Gradient descent is slowwwwww SGD reduces the number of terms


---
For example : if we have 10000 samples then SGD would reduce the amount terms computed by a factor of 10000 :)


"""

model.fit(X_train,y_train)

model.score(X_train,y_train)

model.predict(X_train)

from sklearn.metrics  import  mean_squared_error

predicted_y = model.predict(X_test)

mean_squared_error(y_test, predicted_y)

a="4 5 6"
h=a.split(' ')
for i in range(0,len(h)-3):
  h.append(int(h[i]))
h=np.array(h)
h

train.head(2)

X_test.head(1)

"""convert to 2 dimensioal array """

y_pred=model.predict(X_test)

print(y_pred)

y_test = np.array(y_test,dtype=float)

y_test.reshape(-1,1)
y_pred.reshape(-1,1)

test=[]
for i in range(0,len(y_test)) :
    test.append(int(y_test[i]))

test=np.array(test)

test

"""### **Testinggggggggg**"""

from sklearn.metrics import accuracy_score
df = {} 
accuracy_score(y_test,y_pred) #we can do bettre maybe if we change the model /reduce features

df = np.concatenate((y_pred.reshape(-1,1),test.reshape(-1,1)),axis=1)
dataframe = pd.DataFrame(df,columns=['Predicitions','True or false'])

dataframe